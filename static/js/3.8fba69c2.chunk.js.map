{"version":3,"file":"static/js/3.8fba69c2.chunk.js","mappings":"wKACA,G,QAA0B,0BAA1B,EAAiE,6BAAjE,EAAuG,wBAAvG,EAAwI,wBAAxI,EAA2K,0B,mBCQ9JA,EAAa,SAACC,GACvB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,gBAAKC,UAAWC,EAAW,IAAMA,EAAS,UACtC,SAAC,KAAO,CAACC,GAAIJ,EAAK,SAAED,EAAMM,QAGtC,ECRaC,EAAU,SAACP,GACpB,OACI,gBAAKG,UAAWC,EAAS,SAAEJ,EAAMQ,MAEzC,E,uCCgDMC,GAAsBC,EAAAA,EAAAA,GAA8B,CAACC,KAAM,wBAArCD,EAb4C,SAACV,GACrE,OAAO,kBAAMY,SAAUZ,EAAMa,aAAa,WACtC,0BACI,SAACC,EAAA,EAAK,CAACC,UAAWC,EAAAA,EAAUV,KAAK,iBAAiBW,YAAY,qBACvDC,SAAU,CAACC,EAAAA,GAAUC,EAAAA,SAGhC,0BACI,yCAGZ,I,UCjBA,GAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KAjBoB,SAACC,GACrB,MAAO,CACHC,WAAYD,EAAMC,WAG1B,IAC2B,SAACC,GACxB,MAAO,CACHC,YAAa,SAACC,GACVF,GAASG,EAAAA,EAAAA,GAAcD,GAE3B,EAER,IAGA,ED7BuB,SAAC3B,GAEpB,IAAIuB,EAAQvB,EAAMwB,WAEdK,EAAkBN,EAAMO,QAAQC,KAAI,SAAAC,GAAE,OAAI,SAACjC,EAAU,CAACO,KAAM0B,EAAG1B,KAAkBJ,GAAI8B,EAAG1B,MAAd0B,EAAG9B,GAAkB,IAC/F+B,EAAkBV,EAAMW,SAASH,KAAI,SAAAC,GAAE,OAAI,SAACzB,EAAO,CAACC,KAAMwB,EAAGG,SAAcH,EAAG9B,GAAK,IAQvF,OACI,iBAAKC,UAAWC,EAAU,WACtB,gBAAKD,UAAWC,EAAc,SACzByB,KAGL,iBAAK1B,UAAWC,EAAW,WACvB,yBAAM6B,KACN,uBAGJ,SAACxB,EAAmB,CAACG,SAhBT,SAACwB,GAEjBpC,EAAM0B,YAAYU,EAAOT,eAC7B,MAgBJ,G","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__rZNqF\",\"dialogItems\":\"Dialogs_dialogItems__o56fy\",\"active\":\"Dialogs_active__q0qXU\",\"dialog\":\"Dialogs_dialog__3VXIh\",\"messages\":\"Dialogs_messages__aGcdS\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype DialogItemType = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemType) => {\r\n    let path = '/dialogs/' + props.id\r\n\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\ntype MessageType = {\r\n    text: string\r\n}\r\n\r\nexport const Message = (props: MessageType) => {\r\n    return (\r\n        <div className={s.dialog}>{props.text}</div>\r\n    )\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from './Dialogs.module.css'\r\n\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {Message} from './Message/Message';\r\n\r\nimport {DialogsPropsType} from './DialogsContainer';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../common/FormsControls/Textarea';\r\nimport {maxLength15, required} from '../../utils/validators';\r\n\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let state = props.dialogPage\r\n\r\n    let dialogsElements = state.dialogs.map(el => <DialogItem name={el.name} key={el.id} id={el.name}/>)\r\n    let messageElements = state.messages.map(el => <Message text={el.message} key={el.id}/>)\r\n\r\n\r\n    let addNewMessage = (values: AddMessageFormType) => {\r\n        //alert(values.newMessageBody)\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                <div>{messageElements}</div>\r\n                <div>\r\n                </div>\r\n            </div>\r\n            <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\ntype AddMessageFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea} name=\"newMessageBody\" placeholder=\"Enter your message\"\r\n                   validate={[required, maxLength15]}/>\r\n        </div>\r\n\r\n        <div>\r\n            <button>Send</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm<AddMessageFormType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React, {ComponentType} from 'react';\r\n\r\n\r\nimport {AppStateType} from '../../redux/redux-store'\r\n\r\nimport {DialogStateType, sendMessageAC} from '../../redux/dialog-reducer';\r\nimport {Dialogs} from './Dialogs';\r\n\r\nimport {connect} from 'react-redux';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialogPage: DialogStateType\r\n\r\n}\r\ntype MapDispatchPropsType = {\r\n\r\n    sendMessage: (message: string) => void\r\n\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogPage: state.dialogPage\r\n\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n//export const DialogsContainer = withAuthRedirect(connect(mapStateToProps, mapDispatchToProps)(Dialogs))\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    //withAuthRedirect\r\n)(Dialogs)"],"names":["DialogItem","props","path","id","className","s","to","name","Message","text","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","maxLength15","compose","connect","state","dialogPage","dispatch","sendMessage","newMessageBody","sendMessageAC","dialogsElements","dialogs","map","el","messageElements","messages","message","values"],"sourceRoot":""}